<?php
/**
 * Template
 *
 * PHP version 5
 *
 * @category Class
 * @package  Squiggle
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Squiggle\Model;

use \ArrayAccess;
/**
 * Template Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Squiggle
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Template implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'user' => 'int',
        'global_template' => 'int',
        'name' => 'string',
        'description' => 'string',
        'content_html' => 'string',
        'content_plaintext' => 'string',
        'thumbnail' => 'int',
        'settings' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'user' => 'user',
        'global_template' => 'global_template',
        'name' => 'name',
        'description' => 'description',
        'content_html' => 'content_html',
        'content_plaintext' => 'content_plaintext',
        'thumbnail' => 'thumbnail',
        'settings' => 'settings',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'user' => 'setUser',
        'global_template' => 'setGlobalTemplate',
        'name' => 'setName',
        'description' => 'setDescription',
        'content_html' => 'setContentHtml',
        'content_plaintext' => 'setContentPlaintext',
        'thumbnail' => 'setThumbnail',
        'settings' => 'setSettings',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'user' => 'getUser',
        'global_template' => 'getGlobalTemplate',
        'name' => 'getName',
        'description' => 'getDescription',
        'content_html' => 'getContentHtml',
        'content_plaintext' => 'getContentPlaintext',
        'thumbnail' => 'getThumbnail',
        'settings' => 'getSettings',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    );
  
    
    /**
      * $id 
      * @var int
      */
    protected $id;
    
    /**
      * $user 
      * @var int
      */
    protected $user;
    
    /**
      * $global_template 
      * @var int
      */
    protected $global_template;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $description 
      * @var string
      */
    protected $description;
    
    /**
      * $content_html 
      * @var string
      */
    protected $content_html;
    
    /**
      * $content_plaintext 
      * @var string
      */
    protected $content_plaintext;
    
    /**
      * $thumbnail 
      * @var int
      */
    protected $thumbnail;
    
    /**
      * $settings 
      * @var string
      */
    protected $settings;
    
    /**
      * $created_at 
      * @var \DateTime
      */
    protected $created_at;
    
    /**
      * $updated_at 
      * @var \DateTime
      */
    protected $updated_at;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            foreach ($data as $key => $value) {
                if (property_exists($this, $key)) {
                    $this->$key = $value;
                }
            }
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets user
     * @return int
     */
    public function getUser()
    {
        return $this->user;
    }
  
    /**
     * Sets user
     * @param int $user 
     * @return $this
     */
    public function setUser($user)
    {
        
        $this->user = $user;
        return $this;
    }
    
    /**
     * Gets global_template
     * @return int
     */
    public function getGlobalTemplate()
    {
        return $this->global_template;
    }
  
    /**
     * Sets global_template
     * @param int $global_template 
     * @return $this
     */
    public function setGlobalTemplate($global_template)
    {
        
        $this->global_template = $global_template;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description 
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets content_html
     * @return string
     */
    public function getContentHtml()
    {
        return $this->content_html;
    }
  
    /**
     * Sets content_html
     * @param string $content_html 
     * @return $this
     */
    public function setContentHtml($content_html)
    {
        
        $this->content_html = $content_html;
        return $this;
    }
    
    /**
     * Gets content_plaintext
     * @return string
     */
    public function getContentPlaintext()
    {
        return $this->content_plaintext;
    }
  
    /**
     * Sets content_plaintext
     * @param string $content_plaintext 
     * @return $this
     */
    public function setContentPlaintext($content_plaintext)
    {
        
        $this->content_plaintext = $content_plaintext;
        return $this;
    }
    
    /**
     * Gets thumbnail
     * @return int
     */
    public function getThumbnail()
    {
        return $this->thumbnail;
    }
  
    /**
     * Sets thumbnail
     * @param int $thumbnail 
     * @return $this
     */
    public function setThumbnail($thumbnail)
    {
        
        $this->thumbnail = $thumbnail;
        return $this;
    }
    
    /**
     * Gets settings
     * @return string
     */
    public function getSettings()
    {
        return $this->settings;
    }
  
    /**
     * Sets settings
     * @param string $settings 
     * @return $this
     */
    public function setSettings($settings)
    {
        
        $this->settings = $settings;
        return $this;
    }
    
    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }
  
    /**
     * Sets created_at
     * @param \DateTime $created_at 
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        
        $this->created_at = $created_at;
        return $this;
    }
    
    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }
  
    /**
     * Sets updated_at
     * @param \DateTime $updated_at 
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        
        $this->updated_at = $updated_at;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Squiggle\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Squiggle\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
