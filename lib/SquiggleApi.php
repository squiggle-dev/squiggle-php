<?php
/**
 * SquiggleApi
 * PHP version 5
 *
 * @category Class
 * @package  Squiggle
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Squiggle;

use \Squiggle\Configuration;
use \Squiggle\ApiClient;
use \Squiggle\ApiException;
use \Squiggle\ObjectSerializer;

/**
 * SquiggleApi Class Doc Comment
 *
 * @category Class
 * @package  Squiggle
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SquiggleApi
{

    /**
     * API Client
     * @var \Squiggle\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Squiggle\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://squiggle-api.sitlabs.co.uk/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Squiggle\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Squiggle\ApiClient $apiClient set the API client
     * @return SquiggleApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * requestAddressToken
     *
     * 
     *
     * @param object $data  (required)
     * @return \Squiggle\Model\JSONWebTokenResponse
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function requestAddressToken($data)
    {
        list($response, $statusCode, $httpHeader) = $this->requestAddressTokenWithHttpInfo ($data);
        return $response; 
    }


    /**
     * requestAddressTokenWithHttpInfo
     *
     * 
     *
     * @param object $data  (required)
     * @return Array of \Squiggle\Model\JSONWebTokenResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function requestAddressTokenWithHttpInfo($data)
    {
        
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling requestAddressToken');
        }
  
        // parse inputs
        $resourcePath = "/authentication/address";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\JSONWebTokenResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\JSONWebTokenResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\JSONWebTokenResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * findAddresses
     *
     * 
     *
     * @param int $offset The start offset of the result set (optional)
     * @param int $limit Max records to return (optional)
     * @return \Squiggle\Model\AddressResponseMultiple
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function findAddresses($offset = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->findAddressesWithHttpInfo ($offset, $limit);
        return $response; 
    }


    /**
     * findAddressesWithHttpInfo
     *
     * 
     *
     * @param int $offset The start offset of the result set (optional)
     * @param int $limit Max records to return (optional)
     * @return Array of \Squiggle\Model\AddressResponseMultiple, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function findAddressesWithHttpInfo($offset = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/v1/addresses";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\AddressResponseMultiple'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\AddressResponseMultiple', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\AddressResponseMultiple', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * addAddress
     *
     * 
     *
     * @param object $data  (required)
     * @return \Squiggle\Model\AddressResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function addAddress($data)
    {
        list($response, $statusCode, $httpHeader) = $this->addAddressWithHttpInfo ($data);
        return $response; 
    }


    /**
     * addAddressWithHttpInfo
     *
     * 
     *
     * @param object $data  (required)
     * @return Array of \Squiggle\Model\AddressResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function addAddressWithHttpInfo($data)
    {
        
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling addAddress');
        }
  
        // parse inputs
        $resourcePath = "/v1/addresses";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\AddressResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\AddressResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\AddressResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAddress
     *
     * 
     *
     * @param int $id ID of address to get (required)
     * @return \Squiggle\Model\AddressResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function getAddress($id)
    {
        list($response, $statusCode, $httpHeader) = $this->getAddressWithHttpInfo ($id);
        return $response; 
    }


    /**
     * getAddressWithHttpInfo
     *
     * 
     *
     * @param int $id ID of address to get (required)
     * @return Array of \Squiggle\Model\AddressResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function getAddressWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getAddress');
        }
  
        // parse inputs
        $resourcePath = "/v1/addresses/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\AddressResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\AddressResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\AddressResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteAddress
     *
     * 
     *
     * @param int $id ID of address to delete (required)
     * @return void
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function deleteAddress($id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteAddressWithHttpInfo ($id);
        return $response; 
    }


    /**
     * deleteAddressWithHttpInfo
     *
     * 
     *
     * @param int $id ID of address to delete (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function deleteAddressWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteAddress');
        }
  
        // parse inputs
        $resourcePath = "/v1/addresses/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * editAddress
     *
     * 
     *
     * @param int $id ID of address to update (required)
     * @param object $data  (required)
     * @return \Squiggle\Model\AddressResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function editAddress($id, $data)
    {
        list($response, $statusCode, $httpHeader) = $this->editAddressWithHttpInfo ($id, $data);
        return $response; 
    }


    /**
     * editAddressWithHttpInfo
     *
     * 
     *
     * @param int $id ID of address to update (required)
     * @param object $data  (required)
     * @return Array of \Squiggle\Model\AddressResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function editAddressWithHttpInfo($id, $data)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling editAddress');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling editAddress');
        }
  
        // parse inputs
        $resourcePath = "/v1/addresses/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PATCH',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\AddressResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\AddressResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\AddressResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * findGlobalTemplates
     *
     * 
     *
     * @param int $offset The start offset of the result set (optional)
     * @param int $limit Max records to return (optional)
     * @return \Squiggle\Model\GlobalTemplateResponseMultiple
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function findGlobalTemplates($offset = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->findGlobalTemplatesWithHttpInfo ($offset, $limit);
        return $response; 
    }


    /**
     * findGlobalTemplatesWithHttpInfo
     *
     * 
     *
     * @param int $offset The start offset of the result set (optional)
     * @param int $limit Max records to return (optional)
     * @return Array of \Squiggle\Model\GlobalTemplateResponseMultiple, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function findGlobalTemplatesWithHttpInfo($offset = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/v1/global-templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\GlobalTemplateResponseMultiple'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\GlobalTemplateResponseMultiple', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\GlobalTemplateResponseMultiple', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * addGlobalTemplate
     *
     * 
     *
     * @param object $data  (required)
     * @return \Squiggle\Model\GlobalTemplateResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function addGlobalTemplate($data)
    {
        list($response, $statusCode, $httpHeader) = $this->addGlobalTemplateWithHttpInfo ($data);
        return $response; 
    }


    /**
     * addGlobalTemplateWithHttpInfo
     *
     * 
     *
     * @param object $data  (required)
     * @return Array of \Squiggle\Model\GlobalTemplateResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function addGlobalTemplateWithHttpInfo($data)
    {
        
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling addGlobalTemplate');
        }
  
        // parse inputs
        $resourcePath = "/v1/global-templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\GlobalTemplateResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\GlobalTemplateResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\GlobalTemplateResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getGlobalTemplate
     *
     * 
     *
     * @param int $id ID of global template to get (required)
     * @return \Squiggle\Model\GlobalTemplateResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function getGlobalTemplate($id)
    {
        list($response, $statusCode, $httpHeader) = $this->getGlobalTemplateWithHttpInfo ($id);
        return $response; 
    }


    /**
     * getGlobalTemplateWithHttpInfo
     *
     * 
     *
     * @param int $id ID of global template to get (required)
     * @return Array of \Squiggle\Model\GlobalTemplateResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function getGlobalTemplateWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getGlobalTemplate');
        }
  
        // parse inputs
        $resourcePath = "/v1/global-templates/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\GlobalTemplateResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\GlobalTemplateResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\GlobalTemplateResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteGlobalTemplate
     *
     * 
     *
     * @param int $id ID of global template to delete (required)
     * @return void
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function deleteGlobalTemplate($id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteGlobalTemplateWithHttpInfo ($id);
        return $response; 
    }


    /**
     * deleteGlobalTemplateWithHttpInfo
     *
     * 
     *
     * @param int $id ID of global template to delete (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function deleteGlobalTemplateWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteGlobalTemplate');
        }
  
        // parse inputs
        $resourcePath = "/v1/global-templates/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * editGlobalTemplate
     *
     * 
     *
     * @param int $id ID of global template to update (required)
     * @param object $data  (required)
     * @return \Squiggle\Model\GlobalTemplateResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function editGlobalTemplate($id, $data)
    {
        list($response, $statusCode, $httpHeader) = $this->editGlobalTemplateWithHttpInfo ($id, $data);
        return $response; 
    }


    /**
     * editGlobalTemplateWithHttpInfo
     *
     * 
     *
     * @param int $id ID of global template to update (required)
     * @param object $data  (required)
     * @return Array of \Squiggle\Model\GlobalTemplateResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function editGlobalTemplateWithHttpInfo($id, $data)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling editGlobalTemplate');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling editGlobalTemplate');
        }
  
        // parse inputs
        $resourcePath = "/v1/global-templates/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PATCH',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\GlobalTemplateResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\GlobalTemplateResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\GlobalTemplateResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * findSnippets
     *
     * 
     *
     * @param int $offset The start offset of the result set (optional)
     * @param int $limit Max records to return (optional)
     * @return \Squiggle\Model\SnippetResponseMultiple
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function findSnippets($offset = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->findSnippetsWithHttpInfo ($offset, $limit);
        return $response; 
    }


    /**
     * findSnippetsWithHttpInfo
     *
     * 
     *
     * @param int $offset The start offset of the result set (optional)
     * @param int $limit Max records to return (optional)
     * @return Array of \Squiggle\Model\SnippetResponseMultiple, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function findSnippetsWithHttpInfo($offset = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/v1/snippets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\SnippetResponseMultiple'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\SnippetResponseMultiple', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\SnippetResponseMultiple', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * addSnippet
     *
     * 
     *
     * @param object $data  (required)
     * @return \Squiggle\Model\SnippetResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function addSnippet($data)
    {
        list($response, $statusCode, $httpHeader) = $this->addSnippetWithHttpInfo ($data);
        return $response; 
    }


    /**
     * addSnippetWithHttpInfo
     *
     * 
     *
     * @param object $data  (required)
     * @return Array of \Squiggle\Model\SnippetResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function addSnippetWithHttpInfo($data)
    {
        
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling addSnippet');
        }
  
        // parse inputs
        $resourcePath = "/v1/snippets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\SnippetResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\SnippetResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\SnippetResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getSnippet
     *
     * 
     *
     * @param int $id ID of snippet to get (required)
     * @return \Squiggle\Model\SnippetResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function getSnippet($id)
    {
        list($response, $statusCode, $httpHeader) = $this->getSnippetWithHttpInfo ($id);
        return $response; 
    }


    /**
     * getSnippetWithHttpInfo
     *
     * 
     *
     * @param int $id ID of snippet to get (required)
     * @return Array of \Squiggle\Model\SnippetResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function getSnippetWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getSnippet');
        }
  
        // parse inputs
        $resourcePath = "/v1/snippets/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\SnippetResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\SnippetResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\SnippetResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteSnippet
     *
     * 
     *
     * @param int $id ID of snippet to delete (required)
     * @return void
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function deleteSnippet($id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteSnippetWithHttpInfo ($id);
        return $response; 
    }


    /**
     * deleteSnippetWithHttpInfo
     *
     * 
     *
     * @param int $id ID of snippet to delete (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function deleteSnippetWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteSnippet');
        }
  
        // parse inputs
        $resourcePath = "/v1/snippets/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * editSnippet
     *
     * 
     *
     * @param int $id ID of snippet to update (required)
     * @param object $data  (required)
     * @return \Squiggle\Model\SnippetResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function editSnippet($id, $data)
    {
        list($response, $statusCode, $httpHeader) = $this->editSnippetWithHttpInfo ($id, $data);
        return $response; 
    }


    /**
     * editSnippetWithHttpInfo
     *
     * 
     *
     * @param int $id ID of snippet to update (required)
     * @param object $data  (required)
     * @return Array of \Squiggle\Model\SnippetResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function editSnippetWithHttpInfo($id, $data)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling editSnippet');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling editSnippet');
        }
  
        // parse inputs
        $resourcePath = "/v1/snippets/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PATCH',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\SnippetResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\SnippetResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\SnippetResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * findTemplates
     *
     * 
     *
     * @param int $offset The start offset of the result set (optional)
     * @param int $limit Max records to return (optional)
     * @return \Squiggle\Model\TemplateResponseMultiple
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function findTemplates($offset = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->findTemplatesWithHttpInfo ($offset, $limit);
        return $response; 
    }


    /**
     * findTemplatesWithHttpInfo
     *
     * 
     *
     * @param int $offset The start offset of the result set (optional)
     * @param int $limit Max records to return (optional)
     * @return Array of \Squiggle\Model\TemplateResponseMultiple, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function findTemplatesWithHttpInfo($offset = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/v1/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\TemplateResponseMultiple'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\TemplateResponseMultiple', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\TemplateResponseMultiple', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * addTemplate
     *
     * 
     *
     * @param object $data  (required)
     * @return \Squiggle\Model\TemplateResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function addTemplate($data)
    {
        list($response, $statusCode, $httpHeader) = $this->addTemplateWithHttpInfo ($data);
        return $response; 
    }


    /**
     * addTemplateWithHttpInfo
     *
     * 
     *
     * @param object $data  (required)
     * @return Array of \Squiggle\Model\TemplateResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function addTemplateWithHttpInfo($data)
    {
        
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling addTemplate');
        }
  
        // parse inputs
        $resourcePath = "/v1/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\TemplateResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\TemplateResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\TemplateResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getTemplate
     *
     * 
     *
     * @param int $id ID of template to get (required)
     * @return \Squiggle\Model\TemplateResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function getTemplate($id)
    {
        list($response, $statusCode, $httpHeader) = $this->getTemplateWithHttpInfo ($id);
        return $response; 
    }


    /**
     * getTemplateWithHttpInfo
     *
     * 
     *
     * @param int $id ID of template to get (required)
     * @return Array of \Squiggle\Model\TemplateResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function getTemplateWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getTemplate');
        }
  
        // parse inputs
        $resourcePath = "/v1/templates/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\TemplateResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\TemplateResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\TemplateResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteTemplate
     *
     * 
     *
     * @param int $id ID of template to delete (required)
     * @return void
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function deleteTemplate($id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteTemplateWithHttpInfo ($id);
        return $response; 
    }


    /**
     * deleteTemplateWithHttpInfo
     *
     * 
     *
     * @param int $id ID of template to delete (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function deleteTemplateWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteTemplate');
        }
  
        // parse inputs
        $resourcePath = "/v1/templates/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * editTemplate
     *
     * 
     *
     * @param int $id ID of template to update (required)
     * @param object $data  (required)
     * @return \Squiggle\Model\TemplateResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function editTemplate($id, $data)
    {
        list($response, $statusCode, $httpHeader) = $this->editTemplateWithHttpInfo ($id, $data);
        return $response; 
    }


    /**
     * editTemplateWithHttpInfo
     *
     * 
     *
     * @param int $id ID of template to update (required)
     * @param object $data  (required)
     * @return Array of \Squiggle\Model\TemplateResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function editTemplateWithHttpInfo($id, $data)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling editTemplate');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling editTemplate');
        }
  
        // parse inputs
        $resourcePath = "/v1/templates/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PATCH',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\TemplateResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\TemplateResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\TemplateResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * findUsers
     *
     * 
     *
     * @param int $offset The start offset of the result set (optional)
     * @param int $limit Max records to return (optional)
     * @return \Squiggle\Model\UserResponseMultiple
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function findUsers($offset = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->findUsersWithHttpInfo ($offset, $limit);
        return $response; 
    }


    /**
     * findUsersWithHttpInfo
     *
     * 
     *
     * @param int $offset The start offset of the result set (optional)
     * @param int $limit Max records to return (optional)
     * @return Array of \Squiggle\Model\UserResponseMultiple, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function findUsersWithHttpInfo($offset = null, $limit = null)
    {
        
  
        // parse inputs
        $resourcePath = "/v1/users";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\UserResponseMultiple'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\UserResponseMultiple', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\UserResponseMultiple', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * addUser
     *
     * 
     *
     * @param object $data  (required)
     * @return \Squiggle\Model\UserResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function addUser($data)
    {
        list($response, $statusCode, $httpHeader) = $this->addUserWithHttpInfo ($data);
        return $response; 
    }


    /**
     * addUserWithHttpInfo
     *
     * 
     *
     * @param object $data  (required)
     * @return Array of \Squiggle\Model\UserResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function addUserWithHttpInfo($data)
    {
        
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling addUser');
        }
  
        // parse inputs
        $resourcePath = "/v1/users";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\UserResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\UserResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\UserResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getUser
     *
     * 
     *
     * @param int $id ID of user to get (required)
     * @return \Squiggle\Model\UserResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function getUser($id)
    {
        list($response, $statusCode, $httpHeader) = $this->getUserWithHttpInfo ($id);
        return $response; 
    }


    /**
     * getUserWithHttpInfo
     *
     * 
     *
     * @param int $id ID of user to get (required)
     * @return Array of \Squiggle\Model\UserResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function getUserWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getUser');
        }
  
        // parse inputs
        $resourcePath = "/v1/users/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\UserResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\UserResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\UserResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteUser
     *
     * 
     *
     * @param int $id ID of user to delete (required)
     * @return void
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function deleteUser($id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteUserWithHttpInfo ($id);
        return $response; 
    }


    /**
     * deleteUserWithHttpInfo
     *
     * 
     *
     * @param int $id ID of user to delete (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function deleteUserWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteUser');
        }
  
        // parse inputs
        $resourcePath = "/v1/users/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * editUser
     *
     * 
     *
     * @param int $id ID of user to update (required)
     * @param object $data  (required)
     * @return \Squiggle\Model\UserResponseSingle
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function editUser($id, $data)
    {
        list($response, $statusCode, $httpHeader) = $this->editUserWithHttpInfo ($id, $data);
        return $response; 
    }


    /**
     * editUserWithHttpInfo
     *
     * 
     *
     * @param int $id ID of user to update (required)
     * @param object $data  (required)
     * @return Array of \Squiggle\Model\UserResponseSingle, HTTP status code, HTTP response headers (array of strings)
     * @throws \Squiggle\ApiException on non-2xx response
     */
    public function editUserWithHttpInfo($id, $data)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling editUser');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling editUser');
        }
  
        // parse inputs
        $resourcePath = "/v1/users/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PATCH',
                $queryParams, $httpBody,
                $headerParams, '\Squiggle\Model\UserResponseSingle'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Squiggle\ObjectSerializer::deserialize($response, '\Squiggle\Model\UserResponseSingle', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Squiggle\ObjectSerializer::deserialize($e->getResponseBody(), '\Squiggle\Model\UserResponseSingle', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
